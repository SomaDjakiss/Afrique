import streamlit as st
from streamlit_javascript import st_javascript
import pymongo
from pymongo import MongoClient
import uuid
import random
import pandas as pd
import os
import altair as alt
from textblob import TextBlob
import numpy as np
from datetime import datetime, timedelta
import time
from PIL import Image
import base64

# üõ†Ô∏è Configuration de la page
st.set_page_config(page_title="Wiki Survey", layout="wide", page_icon="üó≥Ô∏è")

# === Configuration MongoDB ===
#MONGO_URI = "mongodb://localhost:27017/"
MONGO_URI = "mongodb://mongo:JiwSbeZEXWiILqHARYsOnvkCOenDSKoY@shuttle.proxy.rlwy.net:28806"
DB_NAME = "Africa"

# üîß FONCTION POUR CONVERTIR LES ObjectId
def convertir_objectid_pour_streamlit(donnees):
    """Convertit les ObjectId MongoDB en string pour √©viter les erreurs Arrow/Streamlit"""
    if isinstance(donnees, list):
        for item in donnees:
            if isinstance(item, dict):
                for key, value in item.items():
                    if hasattr(value, '__class__') and 'ObjectId' in str(type(value)):
                        item[key] = str(value)
    elif isinstance(donnees, dict):
        for key, value in donnees.items():
            if hasattr(value, '__class__') and 'ObjectId' in str(type(value)):
                donnees[key] = str(value)
    return donnees

# --- Connexion √† MongoDB ---
@st.cache_resource
def get_db_connection():
    """Obtenir une connexion √† MongoDB"""
    try:
        client = MongoClient(MONGO_URI)
        db = client[DB_NAME]
        return db
    except Exception as e:
        st.error(f"Erreur de connexion √† MongoDB: {e}")
        return None

# === Analyse de sentiment ===
def analyze_sentiment(text):
    """Analyser le sentiment d'un texte avec TextBlob"""
    try:
        blob = TextBlob(text)
        polarity = blob.sentiment.polarity

        if polarity > 0.1:
            label = "Positif"
        elif polarity < -0.1:
            label = "N√©gatif"
        else:
            label = "Neutre"

        return polarity, label
    except:
        return 0.0, "Neutre"

def update_sentiment_analytics(question_id):
    """Mettre √† jour les analytics de sentiment pour une question"""
    try:
        db = get_db_connection()

        # Calculer les stats pour les id√©es
        idees_stats_cursor = db.idees.aggregate([
            {"$match": {"id_question": question_id}},
            {"$group": {
                "_id": None,
                "avg_sentiment": {"$avg": "$sentiment_score"},
                "positifs": {"$sum": {"$cond": [{"$eq": ["$sentiment_label", "Positif"]}, 1, 0]}},
                "negatifs": {"$sum": {"$cond": [{"$eq": ["$sentiment_label", "N√©gatif"]}, 1, 0]}},
                "neutres": {"$sum": {"$cond": [{"$eq": ["$sentiment_label", "Neutre"]}, 1, 0]}}
            }}
        ])
        idees_stats = next(idees_stats_cursor, {})

        # Calculer les stats pour les commentaires
        commentaires_stats_cursor = db.commentaire.aggregate([
            {"$match": {"id_question": question_id}},
            {"$group": {
                "_id": None,
                "avg_sentiment": {"$avg": "$sentiment_score"},
                "positifs": {"$sum": {"$cond": [{"$eq": ["$sentiment_label", "Positif"]}, 1, 0]}},
                "negatifs": {"$sum": {"$cond": [{"$eq": ["$sentiment_label", "N√©gatif"]}, 1, 0]}},
                "neutres": {"$sum": {"$cond": [{"$eq": ["$sentiment_label", "Neutre"]}, 1, 0]}}
            }}
        ])
        commentaires_stats = next(commentaires_stats_cursor, {})

        # Ins√©rer ou mettre √† jour les analytics
        db.sentiment_analytics.update_one(
            {"id_question": question_id},
            {"$set": {
                "moyenne_sentiment_idees": idees_stats.get("avg_sentiment", 0),
                "moyenne_sentiment_commentaires": commentaires_stats.get("avg_sentiment", 0),
                "total_idees_positives": idees_stats.get("positifs", 0),
                "total_idees_negatives": idees_stats.get("negatifs", 0),
                "total_idees_neutres": idees_stats.get("neutres", 0),
                "total_commentaires_positifs": commentaires_stats.get("positifs", 0),
                "total_commentaires_negatifs": commentaires_stats.get("negatifs", 0),
                "total_commentaires_neutres": commentaires_stats.get("neutres", 0),
                "derniere_mise_a_jour": datetime.now()
            }},
            upsert=True
        )

    except Exception as e:
        st.error(f"Erreur mise √† jour analytics: {e}")

# Initialiser les cl√©s n√©cessaires dans session_state
if "page" not in st.session_state:
    st.session_state["page"] = "home"

if "id_navigateur" not in st.session_state:
    st.session_state["id_navigateur"] = None

if "auto_refresh" not in st.session_state:
    st.session_state.auto_refresh = False

if "auth" not in st.session_state:
    st.session_state.auth = False

if "utilisateur_id" not in st.session_state:
    st.session_state.utilisateur_id = None

if "email" not in st.session_state:
    st.session_state.email = None

# --- ID navigateur ---
def get_navigateur_id():
    js_code = """
        const existing = localStorage.getItem("id_navigateur");
        if (existing) {
            existing;
        } else {
            const newId = crypto.randomUUID();
            localStorage.setItem("id_navigateur", newId);
            newId;
        }
    """
    return st_javascript(js_code)

def detect_navigateur():
    js_code = "navigator.userAgent;"
    agent = st_javascript(js_code)
    if agent:
        if "Chrome" in agent and "Edg" not in agent:
            return "Chrome"
        elif "Firefox" in agent:
            return "Firefox"
        elif "Edg" in agent:
            return "Edge"
        elif "Safari" in agent and "Chrome" not in agent:
            return "Safari"
    return "Inconnu"

def init_navigateur():
    if not st.session_state["id_navigateur"]:
        id_navigateur = get_navigateur_id()
        if id_navigateur and len(id_navigateur) > 100:
            id_navigateur = id_navigateur[:100]  # Tronquer si n√©cessaire
        navigateur_nom = detect_navigateur()
        if id_navigateur:
            st.session_state["id_navigateur"] = id_navigateur
            db = get_db_connection()
            # Enregistrer seulement le navigateur sans cr√©er/√©craser d'autres donn√©es
            try:
                db.navigateur.update_one(
                    {"id_navigateur": id_navigateur},
                    {"$set": {
                        "id_navigateur": id_navigateur,
                        "navigateur": navigateur_nom,
                        "date_creation": datetime.now()
                    }},
                    upsert=True
                )
            except Exception as e:
                # Ignorer les erreurs de connexion √† la DB au d√©marrage
                pass

# Appel obligatoire
init_navigateur()

# =============================================================
# === FONCTIONS D'AUTHENTIFICATION ===
# =============================================================

def creer_compte():
    """Page de cr√©ation de compte pour les nouveaux utilisateurs."""
    st.subheader("Cr√©ez votre compte pour proposer une question")
    db = get_db_connection()

    email_reg = st.text_input("Email", key="email_reg")
    mot_de_passe_reg = st.text_input("Mot de passe", type="password", key="pass_reg")
    mot_de_passe_conf = st.text_input("Confirmer le mot de passe", type="password", key="pass_conf")

    if st.button("Cr√©er le compte"):
        if not email_reg or not mot_de_passe_reg or not mot_de_passe_conf:
            st.error("Veuillez remplir tous les champs.")
            return

        if mot_de_passe_reg != mot_de_passe_conf:
            st.error("Les mots de passe ne correspondent pas.")
            return

        # V√©rifier si l'email existe d√©j√†  
        if db.login.find_one({"email": email_reg}):
            st.error("Cet email est d√©j√† utilis√©. Veuillez vous connecter.")
            return

        # Enregistrer le nouvel utilisateur
        nouvel_utilisateur = {
            "email": email_reg,
            "mot_de_passe": mot_de_passe_reg,
            "date_creation": datetime.now()
        }
        user_id = db.login.insert_one(nouvel_utilisateur).inserted_id

        # Connexion automatique apr√®s la cr√©ation
        st.session_state.auth = True
        st.session_state.utilisateur_id = str(user_id)
        st.session_state.email = email_reg
        st.success(f"‚úÖ Compte cr√©√© et connexion r√©ussie ! Bienvenue {st.session_state.email} !")
        st.rerun()

def login_page():
    """Interface de connexion pour les utilisateurs existants."""
    st.subheader("Connectez-vous pour proposer une question")
    db = get_db_connection()
    email = st.text_input("Email", key="email_login")
    mot_de_passe = st.text_input("Mot de passe", type="password", key="pass_login")

    if st.button("Se connecter"):
        utilisateur = db.login.find_one({
            "email": email,
            "mot_de_passe": mot_de_passe
        })

        if utilisateur:
            st.session_state.auth = True
            st.session_state.utilisateur_id = str(utilisateur["_id"])
            st.session_state.email = utilisateur["email"]
            st.success(f"‚úÖ Bienvenue {st.session_state.email} !")
            time.sleep(1)
            st.rerun()
        else:
            st.error("‚ùå Identifiants incorrects")

def authentication_flow():
    """G√®re la connexion et la cr√©ation de compte via des onglets"""
    tab_login, tab_register = st.tabs(["üîê Se connecter", "‚úèÔ∏è Cr√©er un compte"])

    with tab_login:
        login_page()

    with tab_register:
        creer_compte()

# === Fonctions principales adapt√©es pour MongoDB ===
def creer_question():
    st.header("‚úèÔ∏è Cr√©er une nouvelle question")

    # V√©rifier si l'utilisateur est connect√©, sinon afficher la page d'authentification
    if not st.session_state.get("auth"):
        st.info("Veuillez vous connecter ou cr√©er un compte pour proposer une question.")
        authentication_flow()
        return

    with st.form("form_question"):
        question = st.text_input("Votre question :")
        idee1 = st.text_input("Id√©e 1 :")
        idee2 = st.text_input("Id√©e 2 :")
        submitted = st.form_submit_button("Cr√©er")

        if submitted and question.strip() and idee1.strip() and idee2.strip():
            db = get_db_connection()

            # Ins√©rer la question
            question_data = {
                "question": question,
                "createur_id": st.session_state.utilisateur_id,
                "date_creation": datetime.now()
            }
            question_id = db.question.insert_one(question_data).inserted_id

            # Analyser sentiment des id√©es
            score1, label1 = analyze_sentiment(idee1)
            score2, label2 = analyze_sentiment(idee2)

            # Ins√©rer les id√©es
            db.idees.insert_many([
                {
                    "id_question": question_id,
                    "idee_texte": idee1,
                    "creer_par_utilisateur": "non",
                    "date_creation": datetime.now(),
                    "sentiment_score": float(score1),
                    "sentiment_label": label1
                },
                {
                    "id_question": question_id,
                    "idee_texte": idee2,
                    "creer_par_utilisateur": "non",
                    "date_creation": datetime.now(),
                    "sentiment_score": float(score2),
                    "sentiment_label": label2
                }
            ])

            # Mettre √† jour les analytics
            update_sentiment_analytics(question_id)

            st.success("‚úÖ Question et id√©es enregistr√©es avec analyse de sentiment.")
        elif submitted:
            st.error("Veuillez remplir tous les champs.")

def participer():
    st.header("üó≥Ô∏è Participer aux votes")
    db = get_db_connection()

    # R√©cup√©rer toutes les questions
    all_questions = list(db.question.find({}, {"_id": 1, "question": 1}))

    # R√©cup√©rer les questions d√©j√† vot√©es
    voted_q_ids = [v["id_question"] for v in db.vote.find(
        {"id_navigateur": st.session_state.id_navigateur},
        {"id_question": 1}
    )]

    # Questions disponibles pour le vote
    questions = [q for q in all_questions if q["_id"] not in voted_q_ids]

    if 'current_question_index' not in st.session_state:
        st.session_state.current_question_index = 0

    if st.session_state.current_question_index >= len(questions):
        st.success("‚úÖ Vous avez termin√© toutes les questions disponibles.")
        afficher_formulaire_profil()
        return

    selected_question = questions[st.session_state.current_question_index]
    st.subheader(f"Question : {selected_question['question']}")
    question_id = selected_question["_id"]

    # R√©cup√©rer les id√©es pour cette question
    ideas = list(db.idees.find({"id_question": question_id}, {"_id": 1, "idee_texte": 1}))

    if len(ideas) >= 2:
        choices = random.sample(ideas, 2)
        col1, col2 = st.columns(2)
        with col1:
            if st.button(choices[0]['idee_texte'], use_container_width=True):
                enregistrer_vote(choices[0]['_id'], choices[1]['_id'], question_id)
                st.session_state.current_question_index += 1
                st.rerun()
        with col2:
            if st.button(choices[1]['idee_texte'], use_container_width=True):
                enregistrer_vote(choices[1]['_id'], choices[0]['_id'], question_id)
                st.session_state.current_question_index += 1
                st.rerun()

    # Nouvelle id√©e avec analyse de sentiment
    st.markdown("### üí° Proposer une nouvelle id√©e")
    nouvelle_idee_key = f"nouvelle_idee_{question_id}"

    if st.session_state.get(f"idee_envoyee_{question_id}"):
        st.session_state[nouvelle_idee_key] = ""
        del st.session_state[f"idee_envoyee_{question_id}"]

    nouvelle_idee = st.text_area("Votre id√©e innovante :", key=nouvelle_idee_key, height=80)

    if st.button("‚ûï Soumettre l'id√©e", key=f"btn_idee_{question_id}"):
        if nouvelle_idee.strip():
            score, label = analyze_sentiment(nouvelle_idee)
            db.idees.insert_one({
                "id_question": question_id,
                "idee_texte": nouvelle_idee.strip(),
                "creer_par_utilisateur": "oui",
                "date_creation": datetime.now(),
                "sentiment_score": float(score),
                "sentiment_label": label
            })

            # Mettre √† jour analytics
            update_sentiment_analytics(question_id)

            st.success(f"‚úÖ Id√©e ajout√©e (Sentiment: {label}) !")
            st.session_state[f"idee_envoyee_{question_id}"] = True
            st.rerun()

    # Commentaire avec analyse de sentiment
    st.markdown("### üí¨ Ajouter un commentaire")
    comment_key = f"commentaire_{question_id}"

    if st.session_state.get(f"commentaire_envoye_{question_id}"):
        st.session_state[comment_key] = ""
        del st.session_state[f"commentaire_envoye_{question_id}"]

    commentaire = st.text_area("Votre opinion :", key=comment_key, height=80)

    if st.button("üíæ Ajouter commentaire", key=f"btn_comment_{question_id}"):
        if commentaire.strip():
            score, label = analyze_sentiment(commentaire)
            db.commentaire.insert_one({
                "id_navigateur": st.session_state["id_navigateur"],
                "id_question": question_id,
                "commentaire": commentaire.strip(),
                "date_creation": datetime.now(),
                "sentiment_score": float(score),
                "sentiment_label": label
            })

            # Mettre √† jour analytics
            update_sentiment_analytics(question_id)

            st.success(f"üí¨ Commentaire ajout√© (Sentiment: {label}) !")
            st.session_state[f"commentaire_envoye_{question_id}"] = True
            st.rerun()

def enregistrer_vote(gagnant, perdant, question_id):
    db = get_db_connection()

    # V√©rifier si l'utilisateur a d√©j√† vot√©
    if db.vote.find_one({
        "id_navigateur": st.session_state.id_navigateur,
        "id_question": question_id
    }):
        st.warning("‚ö†Ô∏è Vous avez d√©j√† vot√© pour cette question.")
    else:
        # Enregistrer le vote
        db.vote.insert_one({
            "id_navigateur": st.session_state.id_navigateur,
            "id_question": question_id,
            "id_idee_gagnant": gagnant,
            "id_idee_perdant": perdant,
            "date_vote": datetime.now()
        })

        # Mettre √† jour les analytics apr√®s le vote
        update_sentiment_analytics(question_id)

        st.success("‚úÖ Merci pour votre vote !")

def afficher_formulaire_profil():
    db = get_db_connection()

    if db.profil.find_one({"id_navigateur": st.session_state.id_navigateur}):
        st.success("üéâ Merci ! Vous avez d√©j√† rempli le formulaire.")
        return

    st.subheader("üßæ Veuillez compl√©ter ce court formulaire")
    pays = st.text_input("Pays")
    age = st.number_input("√Çge", min_value=10, max_value=120)
    sexe = st.selectbox("Sexe", ["Homme", "Femme", "Autre"])
    fonction = st.text_input("Fonction")

    if st.button("Soumettre"):
        db.profil.insert_one({
            "id_navigateur": st.session_state.id_navigateur,
            "pays": pays,
            "age": age,
            "sexe": sexe,
            "fonction": fonction,
            "date_creation": datetime.now()
        })
        st.success("‚úÖ Profil enregistr√© avec succ√®s.")

def voir_resultats():
    st.title("üìä R√©sultats des votes par question")

    db = get_db_connection()

    try:
        # √âtape 1: R√©cup√©rer toutes les questions avec leurs id√©es
        questions_avec_idees = list(db.question.aggregate([
            {
                "$lookup": {
                    "from": "idees",
                    "localField": "_id",
                    "foreignField": "id_question",
                    "as": "idees"
                }
            },
            {
                "$match": {
                    "idees": {"$ne": []}  # Seulement les questions qui ont des id√©es
                }
            }
        ]))

        if not questions_avec_idees:
            st.warning("Aucune question avec des id√©es trouv√©e.")
            return

        # Convertir tous les ObjectId
        questions_avec_idees = convertir_objectid_pour_streamlit(questions_avec_idees)

        # Traitement de chaque question
        for question_doc in questions_avec_idees:
            question_id = question_doc["_id"]  # Maintenant c'est une string
            question_text = question_doc["question"]
            idees = question_doc["idees"]

            st.markdown(f"## ‚ùì {question_text}")

            # Calculer les statistiques de vote pour chaque id√©e
            data = []
            for idee in idees:
                idee_id = idee["_id"]  # Maintenant c'est une string
                
                # Convertir en ObjectId pour la requ√™te MongoDB
                from bson import ObjectId
                try:
                    idee_objectid = ObjectId(idee_id)
                    # Compter les victoires et d√©faites
                    victoires = db.vote.count_documents({"id_idee_gagnant": idee_objectid})
                    defaites = db.vote.count_documents({"id_idee_perdant": idee_objectid})
                except:
                    # Si la conversion √©choue, utiliser la string directement
                    victoires = db.vote.count_documents({"id_idee_gagnant": idee_id})
                    defaites = db.vote.count_documents({"id_idee_perdant": idee_id})
                
                total = victoires + defaites
                score = round((victoires / total) * 100, 2) if total > 0 else 0.0

                # Utiliser .get() pour tous les champs
                type_idee = "Propos√©e" if idee.get("creer_par_utilisateur", "non") == "oui" else "Initiale"

                data.append({
                    "Id√©e": idee.get("idee_texte", "Id√©e sans texte"),
                    "Score": float(score),
                    "Type": type_idee,
                    "Sentiment": idee.get("sentiment_label", "Non analys√©"),
                    "Score Sentiment": float(idee.get("sentiment_score", 0.0)),
                    "Victoires": int(victoires),
                    "D√©faites": int(defaites),
                    "Total Votes": int(total)
                })

            if not data:
                st.info("Aucune donn√©e de vote disponible pour cette question.")
                continue

            # Cr√©er le DataFrame et trier
            df = pd.DataFrame(data).sort_values(by="Score", ascending=False)

            # üèÜ Id√©e la plus soutenue
            if not df.empty:
                meilleure = df.iloc[0]
                st.success(f"üèÜ **Id√©e la plus soutenue :** _{meilleure['Id√©e']}_ avec un score de **{meilleure['Score']:.1f}%** (Sentiment: {meilleure['Sentiment']})")

            # üìã Tableau des r√©sultats
            st.markdown("### üìã D√©tail des scores avec analyse de sentiment")
            
            # Afficher les colonnes principales
            df_display = df[["Id√©e", "Score", "Type", "Sentiment", "Victoires", "D√©faites", "Total Votes"]]
            st.dataframe(df_display, use_container_width=True)

            # üìä Visualisation
            st.markdown("### üìä Graphique des scores")
            if len(df) > 1:
                afficher_comparaison_par_score_et_sentiment(df)

            st.markdown("---")

    except Exception as e:
        st.error(f"‚ùå Erreur lors de la r√©cup√©ration des r√©sultats : {e}")
        
        # Debug: Afficher des informations sur la structure des donn√©es
        st.markdown("### üîç Informations de debug")
        
        # V√©rifier la structure des collections
        sample_question = db.question.find_one({})
        sample_idee = db.idees.find_one({})
        sample_vote = db.vote.find_one({})
        
        if sample_question:
            st.write("**Structure question:**", list(sample_question.keys()))
        if sample_idee:
            st.write("**Structure id√©e:**", list(sample_idee.keys()))
        if sample_vote:
            st.write("**Structure vote:**", list(sample_vote.keys()))

def afficher_comparaison_par_score_et_sentiment(df):
    """Graphique comparatif avec scores et sentiments"""
    if df.empty:
        return

    # Graphique principal : Score vs Sentiment
    scatter = alt.Chart(df).mark_circle(size=200, opacity=0.8).encode(
        x=alt.X('Score:Q', title="Score de Vote (%)", scale=alt.Scale(domain=[0, 100])),
        y=alt.Y('Score Sentiment:Q', title="Score de Sentiment", scale=alt.Scale(domain=[-1, 1])),
        color=alt.Color('Type:N', scale=alt.Scale(domain=["Initiale", "Propos√©e"], range=["#1f77b4", "#ff7f0e"])),
        tooltip=['Id√©e', 'Score', 'Sentiment', 'Score Sentiment', 'Type']
    ).properties(
        width=600,
        height=400,
        title="Relation Score de Vote vs Sentiment"
    )

    # Lignes de r√©f√©rence
    hline = alt.Chart(pd.DataFrame({'y': [0]})).mark_rule(color='gray', strokeDash=[2, 2]).encode(y='y:Q')
    vline = alt.Chart(pd.DataFrame({'x': [50]})).mark_rule(color='gray', strokeDash=[2, 2]).encode(x='x:Q')

    # Histogramme des sentiments
    hist_sentiment = alt.Chart(df).mark_bar(opacity=0.7).encode(
        x=alt.X('count()', title='Nombre d\'id√©es'),
        y=alt.Y('Sentiment:N', title='Sentiment'),
        color=alt.Color('Sentiment:N', scale=alt.Scale(domain=['Positif', 'Neutre', 'N√©gatif'],
                                                      range=['#2ca02c', '#ff7f0e', '#d62728']))
    ).properties(
        width=300,
        height=200,
        title="Distribution des Sentiments"
    )

    # Combiner les graphiques
    combined = alt.hconcat(scatter + hline + vline, hist_sentiment)
    st.altair_chart(combined, use_container_width=True)

def afficher_statistiques_votes():
    """Dashboard des statistiques de votes pour une question s√©lectionn√©e"""
    st.title("üìä Statistiques des Votes")

    db = get_db_connection()

    # R√©cup√©rer la liste des questions
    questions = list(db.question.find({}, {"_id": 1, "question": 1}).sort("date_creation", -1))

    if not questions:
        st.warning("Aucune question disponible.")
        return

    # Convertir les ObjectId
    questions = convertir_objectid_pour_streamlit(questions)

    # Liste d√©roulante pour s√©lectionner la question
    question_options = {f"{q['question'][:80]}..." if len(q['question']) > 80 else q['question']: q['_id'] for q in questions}

    selected_question_text = st.selectbox(
        "üîç S√©lectionnez une question √† analyser :",
        options=list(question_options.keys()),
        index=0
    )

    selected_question_id = question_options[selected_question_text]

    # Version simplifi√©e pour √©viter les erreurs de pipeline
    try:
        # Convertir l'ID en ObjectId pour les requ√™tes
        from bson import ObjectId
        try:
            question_objectid = ObjectId(selected_question_id)
        except:
            question_objectid = selected_question_id

        # R√©cup√©rer tous les votes pour cette question
        votes = list(db.vote.find({"id_question": question_objectid}))
        
        if not votes:
            st.warning("Aucune donn√©e de vote disponible pour cette question.")
            return

        # R√©cup√©rer toutes les id√©es de cette question
        idees = list(db.idees.find({"id_question": question_objectid}))
        
        # Convertir les ObjectId des id√©es
        idees = convertir_objectid_pour_streamlit(idees)
        votes = convertir_objectid_pour_streamlit(votes)
        
        # Calculer les statistiques pour chaque id√©e
        data_votes = []
        for idee in idees:
            idee_id = idee["_id"]  # Maintenant c'est une string
            victoires = sum(1 for vote in votes if str(vote["id_idee_gagnant"]) == str(idee_id))
            defaites = sum(1 for vote in votes if str(vote["id_idee_perdant"]) == str(idee_id))
            total = victoires + defaites
            pourcentage = round((victoires / total) * 100, 1) if total > 0 else 0

            # üîß CORRECTION : utiliser .get() au lieu d'acc√®s direct
            type_idee = "Propos√©e par utilisateur" if idee.get("creer_par_utilisateur", "non") == "oui" else "Id√©e initiale"

            data_votes.append({
                'Id√©e': idee.get('idee_texte', 'Id√©e sans texte')[:50] + "..." if len(idee.get('idee_texte', '')) > 50 else idee.get('idee_texte', 'Id√©e sans texte'),
                'Pourcentage': float(pourcentage),
                'Victoires': victoires,
                'D√©faites': defaites,
                'Total': total,
                'Type': type_idee
            })

        # Affichage des m√©triques principales
        if data_votes:
            col1, col2, col3 = st.columns(3)

            total_votes = sum([d['Total'] for d in data_votes])
            meilleure_idee = max(data_votes, key=lambda x: x['Pourcentage']) if data_votes else None
            nb_idees = len(data_votes)

            with col1:
                st.metric("üìä Total des votes", int(total_votes))
            with col2:
                st.metric("üí° Nombre d'id√©es", int(nb_idees))
            with col3:
                if meilleure_idee:
                    st.metric("üèÜ Meilleur score", f"{float(meilleure_idee['Pourcentage'])}%")

            # Graphique en barres - Pourcentage de victoires
            df_votes = pd.DataFrame(data_votes)

            chart_bars = alt.Chart(df_votes).mark_bar().encode(
                x=alt.X('Pourcentage:Q', title='Pourcentage de victoires (%)', scale=alt.Scale(domain=[0, 100])),
                y=alt.Y('Id√©e:N', sort='-x', title='Id√©es'),
                color=alt.Color('Type:N',
                              scale=alt.Scale(domain=["Id√©e initiale", "Propos√©e par utilisateur"],
                                            range=["#1f77b4", "#ff7f0e"]),
                              title="Type d'id√©e"),
                tooltip=['Id√©e:N', 'Pourcentage:Q', 'Victoires:Q', 'D√©faites:Q', 'Type:N']
            ).properties(
                width=700,
                height=400,
                title=f"Pourcentage de victoires par id√©e"
            )

            st.altair_chart(chart_bars, use_container_width=True)

            # Graphique circulaire - R√©partition des votes
            chart_pie = alt.Chart(df_votes).mark_arc(innerRadius=50, outerRadius=120).encode(
                theta=alt.Theta('Victoires:Q', title='Nombre de victoires'),
                color=alt.Color('Id√©e:N', legend=alt.Legend(orient="right")),
                tooltip=['Id√©e:N', 'Victoires:Q', 'Pourcentage:Q']
            ).properties(
                width=400,
                height=400,
                title="R√©partition des victoires"
            )

            st.altair_chart(chart_pie, use_container_width=True)

            # Tableau d√©taill√©
            st.markdown("### üìã D√©tail des r√©sultats")
            st.dataframe(
                df_votes[['Id√©e', 'Pourcentage', 'Victoires', 'D√©faites', 'Total', 'Type']],
                use_container_width=True
            )

    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'analyse des statistiques : {e}")

def afficher_analyse_sentiment_complete():
    """Dashboard complet d'analyse de sentiment avec option de comparaison"""
    st.title("üß† Analyse de Sentiment Avanc√©e")

    # Options de visualisation
    tab1, tab2 = st.tabs(["üìä Question Individuelle", "üìÑ Comparaison Questions"])

    with tab1:
        afficher_sentiment_question_individuelle()

    with tab2:
        afficher_comparaison_sentiment_questions()

def afficher_sentiment_question_individuelle():
    """Analyse de sentiment pour une question individuelle"""
    db = get_db_connection()

    # R√©cup√©rer les questions
    questions = list(db.question.find({}, {"_id": 1, "question": 1}).sort("date_creation", -1))

    if not questions:
        st.warning("Aucune question disponible.")
        return

    # S√©lection de la question
    question_options = {f"{q['question'][:80]}..." if len(q['question']) > 80 else q['question']: q['_id'] for q in questions}

    selected_question_text = st.selectbox(
        "üîç Choisissez une question pour l'analyse de sentiment :",
        options=list(question_options.keys()),
        key="sentiment_individual"
    )

    selected_question_id = question_options[selected_question_text]

    # R√©cup√©rer toutes les donn√©es textuelles pour cette question
    idees = list(db.idees.find({"id_question": selected_question_id}, {
        "idee_texte": 1, "sentiment_score": 1, "sentiment_label": 1, "creer_par_utilisateur": 1
    }))

    commentaires = list(db.commentaire.find({"id_question": selected_question_id}, {
        "commentaire": 1, "sentiment_score": 1, "sentiment_label": 1
    }))

    if not idees and not commentaires:
        st.warning("Aucun contenu textuel disponible pour cette question.")
        return

    # Analyse globale combin√©e
    tous_textes = " ".join([i.get('idee_texte', '') for i in idees] + [c.get('commentaire', '') for c in commentaires])
    sentiment_global_score, sentiment_global_label = analyze_sentiment(tous_textes)

    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)

    nb_idees = len(idees)
    nb_commentaires = len(commentaires)

    with col1:
        st.metric("üí° Id√©es", int(nb_idees))
    with col2:
        st.metric("üí¨ Commentaires", int(nb_commentaires))
    with col3:
        st.metric("üß† Sentiment Global", sentiment_global_label)
    with col4:
        st.metric("üìä Score Global", f"{float(sentiment_global_score):.3f}")

    # Pr√©parer les donn√©es pour visualisation
    sentiment_data = []

    for idee in idees:
        sentiment_data.append({
            'Texte': (idee.get('idee_texte', '')[:100] + "...") if len(idee.get('idee_texte', '')) > 100 else idee.get('idee_texte', ''),
            'Type': 'Id√©e',
            'Sentiment': idee.get('sentiment_label', 'Non analys√©'),
            'Score': float(idee.get('sentiment_score', 0)),
            'Origine': 'Utilisateur' if idee.get('creer_par_utilisateur') == 'oui' else 'Initial'
        })

    for comment in commentaires:
        sentiment_data.append({
            'Texte': (comment.get('commentaire', '')[:100] + "...") if len(comment.get('commentaire', '')) > 100 else comment.get('commentaire', ''),
            'Type': 'Commentaire',
            'Sentiment': comment.get('sentiment_label', 'Non analys√©'),
            'Score': float(comment.get('sentiment_score', 0)),
            'Origine': 'Commentaire'
        })

    if not sentiment_data:
        st.warning("Aucune donn√©e de sentiment disponible.")
        return

    df_sentiment = pd.DataFrame(sentiment_data)

    # Graphiques
    col1, col2 = st.columns(2)

    with col1:
        # Distribution des sentiments
        sentiment_counts = df_sentiment['Sentiment'].value_counts().reset_index()
        sentiment_counts.columns = ['Sentiment', 'Nombre']

        chart_sentiment = alt.Chart(sentiment_counts).mark_arc(innerRadius=40).encode(
            theta=alt.Theta('Nombre:Q'),
            color=alt.Color('Sentiment:N',
                          scale=alt.Scale(domain=['Positif', 'Neutre', 'N√©gatif'],
                                        range=['#2ca02c', '#ff7f0e', '#d62728'])),
            tooltip=['Sentiment:N', 'Nombre:Q']
        ).properties(
            width=300,
            height=300,
            title="Distribution des Sentiments"
        )

        st.altair_chart(chart_sentiment)

    with col2:
        # Scores par type de contenu
        chart_scores = alt.Chart(df_sentiment).mark_boxplot(extent='min-max').encode(
            x='Type:N',
            y=alt.Y('Score:Q', scale=alt.Scale(domain=[-1, 1]), title='Score de Sentiment'),
            color='Type:N'
        ).properties(
            width=300,
            height=300,
            title="Distribution des Scores par Type"
        )

        st.altair_chart(chart_scores)

    # Tableau d√©taill√©
    st.markdown("### üìã Analyse d√©taill√©e")
    st.dataframe(df_sentiment, use_container_width=True)

def afficher_comparaison_sentiment_questions():
    """Comparaison des sentiments entre toutes les questions"""
    st.markdown("### üìÑ Comparaison Multi-Questions")

    db = get_db_connection()

    # R√©cup√©rer les analytics de toutes les questions
    data_comparison = list(db.sentiment_analytics.aggregate([
        {"$lookup": {
            "from": "question",
            "localField": "id_question",
            "foreignField": "_id",
            "as": "question"
        }},
        {"$unwind": "$question"},
        {"$project": {
            "id_question": 1,
            "question": "$question.question",
            "moyenne_sentiment_idees": 1,
            "moyenne_sentiment_commentaires": 1,
            "total_positifs": {"$add": ["$total_idees_positives", "$total_commentaires_positifs"]},
            "total_negatifs": {"$add": ["$total_idees_negatives", "$total_commentaires_negatifs"]},
            "total_neutres": {"$add": ["$total_idees_neutres", "$total_commentaires_neutres"]}
        }}
    ]))

    if not data_comparison:
        st.warning("Aucune donn√©e d'analytics disponible pour la comparaison.")
        return

    # Convertir les ObjectId avant traitement
    data_comparison = convertir_objectid_pour_streamlit(data_comparison)

    # Pr√©parer les donn√©es pour visualisation comparative
    comparison_data = []
    for row in data_comparison:
        question_courte = (row['question'][:40] + "...") if len(row['question']) > 40 else row['question']

        # Conversion des valeurs et v√©rification de NULL
        moyenne_idees = row.get('moyenne_sentiment_idees')
        moyenne_comms = row.get('moyenne_sentiment_commentaires')

        if moyenne_idees is not None:
            comparison_data.append({
                'Question': question_courte,
                'ID': str(row['id_question']),  # Conversion explicite en string
                'Score_Sentiment': float(moyenne_idees),
                'Type_Contenu': 'Id√©es'
            })

        if moyenne_comms is not None:
            comparison_data.append({
                'Question': question_courte,
                'ID': str(row['id_question']),  # Conversion explicite en string
                'Score_Sentiment': float(moyenne_comms),
                'Type_Contenu': 'Commentaires'
            })

    if not comparison_data:
        st.warning("Donn√©es insuffisantes pour la comparaison.")
        return

    df_comparison = pd.DataFrame(comparison_data)

    # Graphique pour les id√©es
    df_idees = df_comparison[df_comparison['Type_Contenu'] == 'Id√©es']
    if not df_idees.empty:
        chart_idees = alt.Chart(df_idees).mark_bar(color='#1f77b4').encode(
            x=alt.X('Question:N', sort='-y', axis=alt.Axis(labelAngle=-45)),
            y=alt.Y('Score_Sentiment:Q', scale=alt.Scale(domain=[-1, 1]), title='Score Sentiment Moyen'),
            tooltip=['Question:N', 'Score_Sentiment:Q']
        ).properties(
            width=600,
            height=300,
            title="Sentiment Moyen des Id√©es par Question"
        )

        # Ligne de r√©f√©rence
        rule = alt.Chart(pd.DataFrame({'y': [0]})).mark_rule(color='red', strokeDash=[2, 2]).encode(y='y:Q')

        st.altair_chart(chart_idees + rule, use_container_width=True)

    # Graphique pour les commentaires
    df_comms = df_comparison[df_comparison['Type_Contenu'] == 'Commentaires']
    if not df_comms.empty:
        chart_comms = alt.Chart(df_comms).mark_bar(color='#ff7f0e').encode(
            x=alt.X('Question:N', sort='-y', axis=alt.Axis(labelAngle=-45)),
            y=alt.Y('Score_Sentiment:Q', scale=alt.Scale(domain=[-1, 1]), title='Score Sentiment Moyen'),
            tooltip=['Question:N', 'Score_Sentiment:Q']
        ).properties(
            width=600,
            height=300,
            title="Sentiment Moyen des Commentaires par Question"
        )

        # Ligne de r√©f√©rence
        rule = alt.Chart(pd.DataFrame({'y': [0]})).mark_rule(color='red', strokeDash=[2, 2]).encode(y='y:Q')

        st.altair_chart(chart_comms + rule, use_container_width=True)

def display_home_page():
    """Affiche la page d'accueil avec HTML moderne et √©l√©gant"""

    # CSS personnalis√© pour une interface moderne
    st.markdown("""
    <style>
        /* Import Google Fonts */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

        .main-container {
            font-family: 'Inter', sans-serif;
        }

        /* Hero Section */
        .hero-section {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 4rem 2rem;
            border-radius: 20px;
            margin-bottom: 3rem;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .hero-content {
            position: relative;
            z-index: 2;
        }

        .hero-title {
            font-size: 3.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        /* Features Grid */
        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin: 3rem 0;
        }

        .feature-card {
            background: white;
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .feature-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 16px 48px rgba(0,0,0,0.15);
        }

        /* Admin Section */
        .admin-section {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            border-radius: 16px;
            padding: 2rem;
            margin: 2rem 0;
            color: white;
        }

        /* About Section */
        .about-section {
            background: white;
            border-radius: 20px;
            padding: 3rem 2rem;
            margin: 3rem 0;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }

        .about-title {
            font-size: 2.5rem;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 2rem;
            text-align: center;
        }
    </style>
    """, unsafe_allow_html=True)

    # Hero Section
    st.markdown("""
    <div class="main-container">
        <div class="hero-section">
            <div class="hero-content">
                <h1 class="hero-title">üó≥Ô∏è QUE VOULONS NOUS POUR L'AFRIQUE </h1>
                <p style="text-align: justify; font-size: 1.2rem; opacity: 0.9;">
                    Plateforme Citoyenne de Vote qui explore les priorit√©s sociales, politiques et √©conomiques des Africains via une plateforme interactive
                    o√π les participants peuvent proposer, √©valuer, et classer des id√©es pour l'avenir du continent.
                </p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Section d'upload d'image pour l'admin
    if st.session_state.get("auth") and st.session_state.get("email") == "yinnaasome@gmail.com":
        st.markdown("""
        <div class="admin-section">
            <h3>üõ†Ô∏è Administration - Gestion des M√©dias</h3>
            <p>En tant qu'administrateur, vous pouvez t√©l√©charger des images pour illustrer les objectifs de la plateforme.</p>
        </div>
        """, unsafe_allow_html=True)

        with st.expander("üñºÔ∏è G√©rer les images de la plateforme", expanded=False):
            uploaded_file = st.file_uploader(
                "T√©l√©charger une image (objectifs de la plateforme)",
                type=["jpg", "png", "jpeg"]
            )

            if uploaded_file is not None:
                try:
                    img = Image.open(uploaded_file)
                    if img.width > 800:
                        img = img.resize((800, int(img.height * 800 / img.width)))
                    st.image(img, caption="Aper√ßu de l'image t√©l√©charg√©e", use_column_width=True)
                    if st.button("üíæ Sauvegarder cette image"):
                        st.success("‚úÖ Image sauvegard√©e avec succ√®s!")
                except Exception as e:
                    st.error(f"‚ùå Erreur lors du traitement de l'image: {e}")

    # About Section
    st.markdown("""
    <div class="about-section">
        <h2 class="about-title">üéØ Notre Mission</h2>
        <div>
            <p style="text-align: justify; font-size: 1.2rem;">
                Faciliter un dialogue inclusif et constructif. Cr√©ez une plateforme en ligne qui permette √† chaque citoyen africain,
                quel que soit son niveau d'√©ducation ou son lieu de r√©sidence, de partager ses id√©es pour l'avenir de l'Afrique.
                Rejoignez notre communaut√© grandissante de citoyens engag√©s et
                contribuez √† fa√ßonner un avenir plus d√©mocratique et inclusif.
            </p>
        </div>
    </div>
    """, unsafe_allow_html=True)

# === Fonction principale avec onglets horizontaux ===
def main():
    # Onglets principaux en haut
    onglets_principaux = st.tabs(["üè† Accueil", "‚ûï Cr√©er une question", "üó≥ Participer au vote", "üìà Voir les Statistiques"])

    # Onglet Accueil
    with onglets_principaux[0]:
        display_home_page()

    # Onglet Cr√©er question
    with onglets_principaux[1]:
        creer_question()

    # Onglet Participer au vote
    with onglets_principaux[2]:
        participer()

    # Onglet Statistiques (avec sous-onglets)
    with onglets_principaux[3]:
        sous_onglets = st.tabs(["üß† Analyse de Sentiment", "üìä Voir les r√©sultats", "üìà Statistiques des Votes"])

        with sous_onglets[0]:
            afficher_analyse_sentiment_complete()

        with sous_onglets[1]:
            voir_resultats()

        with sous_onglets[2]:
            afficher_statistiques_votes()

# === Point d'entr√©e ===
if __name__ == "__main__":
    main()
